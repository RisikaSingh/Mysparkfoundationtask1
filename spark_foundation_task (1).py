# -*- coding: utf-8 -*-
"""Spark foundation task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sdnWeLyPuARlEVNJZmrEJi-g-GQySJV0
"""

#Import all required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.formula.api as smf
from sklearn.model_selection import train_test_split

#Data import
Data = pd.read_csv('https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv')

#Data imported successfully
Data.head()

#Data reading, checking dimensions and information of the data
print(Data)

print('dimensions:')
print(Data.shape)

print('Information:')
Data.info()

#Cheking for duplicates and missing
Data.isnull().values.any()
value = len(Data[Data.duplicated()])
print(value)

#Statistical summary
print("Statistical Summary")
Data.describe().T

#DISTRIBUTION
sns.distplot(Data['Scores'])
plt.show()

#Scatterpot
Data.plot(x='Hours', y='Scores', style ='o', color = "Brown",figsize = (10,5))  
plt.title('Hours and Percentage')  
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score') 
plt.show()

"""# LINEAR REGRESSION"""

#Data Preprocessing
x=Data.iloc[:,:-1].values
y=Data.iloc[:,1].values

#Model Training
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0) 
from sklearn.linear_model import LinearRegression
reg = LinearRegression()  
reg.fit(x_train.reshape(-1,1), y_train) 

print("Training complete.")

#Plotting the Regression Line
m=reg.coef_
c=reg.intercept_
line=m*x+c
plt.scatter(x,y)
plt.plot(x,line, color = "red")
plt.show()

# Testing data
print(x_test)
# Model Prediction 
y_pred = reg.predict(x_test)

# Comparing Acuta vs Predicted
actual_predicted=pd.DataFrame({'Actual':y_test,'Predicted':y_pred})
actual_predicted

#Estimating training and test score
print("Training Score:",reg.score(x_train,y_train))
print("Test Score:",reg.score(x_test,y_test))

# Plotting the Bar graph to depict the difference between the actual and predicted value

actual_predicted.plot(kind='bar',figsize=(8,10))
plt.grid(which='major', linewidth='0.8')
plt.grid(which='minor', linewidth='0.8')
plt.show()

y_pred=reg.predict(x_test)
df=pd.DataFrame({"Actual":y_test,"Predict":y_pred})
print(df)
print("Accuracy:",reg.score(x,y)*100)

hours=9
p=reg.predict([[hours]])
print(f"If a student studied for {hours} hours/day will score{p}% in exam.")

#Model Evaluation
from sklearn import metrics
from sklearn.metrics import r2_score
print('Mean Absolute Error:',metrics.mean_absolute_error(y_test,y_pred))
print('R2 score:',r2_score(y_test,y_pred))

"""Thank You

# Task 1 **completed**

Done by :- Risika Singh
"""